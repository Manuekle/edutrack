import { authOptions } from '@/lib/auth';
import { generateAttendanceReportPDF } from '@/lib/generar-reporte-docente';
import { db } from '@/lib/prisma';
import { withRetry } from '@/lib/retry';
import { getServerSession } from 'next-auth/next';
import { NextResponse } from 'next/server';
import { z } from 'zod';

// Validation schema for creating a report
const createReportSchema = z.object({
  subjectId: z.string().min(1, 'Subject ID is required'),
  format: z.enum(['PDF', 'CSV']).optional().default('PDF'),
});

/**
 * GET /api/docente/reportes
 * Retrieves all reports generated by the teacher
 */
export async function GET() {
  const session = await getServerSession(authOptions);

  if (!session || session.user.role !== 'DOCENTE') {
    return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
  }

  try {
    const reports = await db.report.findMany({
      where: {
        requestedById: session.user.id,
      },
      include: {
        subject: {
          select: {
            name: true,
            code: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return NextResponse.json(reports);
  } catch (error) {
    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 });
  }
}

/**
 * POST /api/docente/reportes
 * Creates a new report for a subject
 */
export async function POST(request: Request) {
  const session = await getServerSession(authOptions);

  if (!session || session.user.role !== 'DOCENTE') {
    return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const { subjectId, format } = createReportSchema.parse(body);

    // Verify the subject belongs to the teacher and get its current period
    const subject = await db.subject.findFirst({
      where: {
        id: subjectId,
        teacherId: session.user.id,
      },
      include: {
        classes: {
          select: {
            date: true,
          },
          orderBy: {
            date: 'desc',
          },
          take: 1,
        },
      },
    });

    if (!subject) {
      return NextResponse.json(
        { error: 'Asignatura no encontrada o no pertenece al docente' },
        { status: 404 }
      );
    }

    // Determine the current period (1: Jan-Jun, 2: Jul-Dec)
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1; // 1-12
    const currentPeriod = currentMonth <= 6 ? 1 : 2; // 1 or 2
    const currentYear = currentDate.getFullYear();

    // Check if a report already exists for this subject and period
    const existingReport = await db.report.findFirst({
      where: {
        subjectId,
        period: currentPeriod,
        year: currentYear,
      },
    });

    if (existingReport) {
      return NextResponse.json(
        { error: 'Ya se ha generado un reporte para este período' },
        { status: 400 }
      );
    }

    // Create the report record in the database
    const newReport = await db.report.create({
      data: {
        subjectId,
        requestedById: session.user.id,
        status: 'PENDIENTE',
        format,
        period: currentPeriod,
        year: currentYear,
      },
      include: {
        subject: {
          select: {
            name: true,
            code: true,
          },
        },
      },
    });

    // Start the PDF generation process in the background with retries and timeout
    (async () => {
      const MAX_GENERATION_TIME = 5 * 60 * 1000; // 5 minutos
      const startTime = Date.now();

      try {
        console.log(
          `[${new Date().toISOString()}] Iniciando generación de reporte ${newReport.id} en segundo plano...`
        );

        // Función con timeout
        const generateWithTimeout = async () => {
          const timeoutPromise = new Promise((_, reject) =>
            setTimeout(
              () => reject(new Error('Tiempo de espera agotado al generar el reporte')),
              MAX_GENERATION_TIME
            )
          );

          const generationPromise = generateAttendanceReportPDF(subjectId, newReport.id);

          return Promise.race([generationPromise, timeoutPromise]);
        };

        // Usar la función withRetry con timeout
        await withRetry(
          generateWithTimeout,
          3, // 3 intentos
          2000 // 2 segundos entre intentos
        );

        const elapsedTime = Date.now() - startTime;
        console.log(
          `[${new Date().toISOString()}] Reporte ${newReport.id} generado exitosamente en ${elapsedTime}ms`
        );
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
        console.error(
          `[${new Date().toISOString()}] Error generando reporte ${newReport.id}:`,
          error
        );

        // Actualizar el estado a FALLIDO con el error
        try {
          await db.report.update({
            where: { id: newReport.id },
            data: {
              status: 'FALLIDO',
              error: errorMessage,
              updatedAt: new Date(),
            },
          });
          console.log(
            `[${new Date().toISOString()}] Estado del reporte ${newReport.id} actualizado a FALLIDO`
          );
        } catch (dbError) {
          console.error(
            `[${new Date().toISOString()}] Error actualizando estado del reporte a FALLIDO:`,
            dbError
          );
        }
      }
    })();

    // Return the initial report with PENDING status
    // The client should poll or use WebSockets to check for status updates
    return NextResponse.json(newReport, { status: 201 });
  } catch (error) {
    console.error('Error in report generation:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      {
        error: 'Error interno del servidor',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}
