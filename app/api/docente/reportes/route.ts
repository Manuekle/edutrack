// app/api/docente/reportes/route.ts
import { authOptions } from '@/lib/auth';
import { generarBitacoraDocente } from '@/lib/pdf/generar-reporte-docente';
import { db } from '@/lib/prisma';
import { getServerSession } from 'next-auth/next';
import { NextResponse } from 'next/server';
import { z } from 'zod';

// Validation schema for creating a report
const createReportSchema = z.object({
  subjectId: z.string().min(1, 'Subject ID is required'),
  format: z.enum(['PDF', 'CSV']).optional().default('PDF'),
});

/**
 * GET /api/docente/reportes
 * Retrieves all reports generated by the teacher
 */
export async function GET() {
  const session = await getServerSession(authOptions);

  if (!session || session.user.role !== 'DOCENTE') {
    return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
  }

  try {
    const reports = await db.report.findMany({
      where: {
        requestedById: session.user.id,
      },
      include: {
        subject: {
          select: {
            name: true,
            code: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return NextResponse.json(reports);
  } catch (error) {
    console.error('Error al obtener reportes:', error);
    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 });
  }
}

/**
 * POST /api/docente/reportes
 * Creates a new report for a subject using Playwright
 */
export async function POST(request: Request) {
  const session = await getServerSession(authOptions);

  if (!session || session.user.role !== 'DOCENTE') {
    return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const { subjectId, format } = createReportSchema.parse(body);

    console.log(`üìã Nueva solicitud de reporte para asignatura: ${subjectId}`);

    // Verify the subject belongs to the teacher and get its current period
    const subject = await db.subject.findFirst({
      where: {
        id: subjectId,
        teacherId: session.user.id,
      },
      include: {
        classes: {
          select: {
            date: true,
          },
          orderBy: {
            date: 'desc',
          },
          take: 1,
        },
      },
    });

    if (!subject) {
      console.log(`‚ùå Asignatura no encontrada o no pertenece al docente: ${subjectId}`);
      return NextResponse.json(
        { error: 'Asignatura no encontrada o no pertenece al docente' },
        { status: 404 }
      );
    }

    // Determine the current period (1: Jan-Jun, 2: Jul-Dec)
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1; // 1-12
    const currentPeriod = currentMonth <= 6 ? 1 : 2; // 1 or 2
    const currentYear = currentDate.getFullYear();

    console.log(`üìÖ Per√≠odo actual: ${currentPeriod}/${currentYear}`);

    // Check if a report already exists for this subject and period
    const existingReport = await db.report.findFirst({
      where: {
        subjectId,
        period: currentPeriod,
        year: currentYear,
        status: {
          in: ['PENDIENTE', 'EN_PROCESO', 'COMPLETADO'],
        },
      },
    });

    if (existingReport) {
      console.log(`‚ö†Ô∏è Ya existe un reporte para este per√≠odo: ${existingReport.id}`);

      // Si el reporte est√° completado, devolver el existente
      if (existingReport.status === 'COMPLETADO') {
        return NextResponse.json(
          {
            error: 'Ya se ha generado un reporte para este per√≠odo',
            existingReport: existingReport,
          },
          { status: 400 }
        );
      }

      // Si est√° en proceso, devolver el reporte en proceso
      if (existingReport.status === 'EN_PROCESO' || existingReport.status === 'PENDIENTE') {
        const reportWithDetails = await db.report.findUnique({
          where: { id: existingReport.id },
          include: {
            subject: {
              select: {
                name: true,
                code: true,
              },
            },
          },
        });

        return NextResponse.json(reportWithDetails, { status: 200 });
      }
    }

    // Create the report record in the database
    console.log('üìù Creando nuevo registro de reporte...');
    const newReport = await db.report.create({
      data: {
        subjectId,
        requestedById: session.user.id,
        status: 'PENDIENTE',
        format,
        period: currentPeriod,
        year: currentYear,
      },
      include: {
        subject: {
          select: {
            name: true,
            code: true,
          },
        },
      },
    });

    console.log(`‚úÖ Reporte creado con ID: ${newReport.id}`);

    // Start the PDF generation process in the background with better error handling
    generarBitacoraDocente(subjectId, newReport.id)
      .then(result => {
        console.log(`üéâ Reporte generado exitosamente: ${result.fileUrl}`);
      })
      .catch(error => {
        console.error(`‚ùå Error en generaci√≥n de reporte ${newReport.id}:`, error);

        // Intentar actualizar el estado a fallido si no se ha hecho ya
        db.report
          .update({
            where: { id: newReport.id },
            data: {
              status: 'FALLIDO',
              error:
                error instanceof Error ? error.message : 'Error desconocido en generaci√≥n de PDF',
            },
          })
          .catch(updateError => {
            console.error('Error al actualizar estado de reporte fallido:', updateError);
          });
      });

    // Return the initial report with PENDING status
    return NextResponse.json(newReport, { status: 201 });
  } catch (error) {
    console.error('‚ùå Error en API de reportes:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inv√°lidos', details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 });
  }
}
