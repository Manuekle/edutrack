import { authOptions } from '@/lib/auth';
import { generateAttendanceReportPDF } from '@/lib/generar-bitacora-docente';
import { db } from '@/lib/prisma';
import { put } from '@vercel/blob';
import { getServerSession } from 'next-auth/next';
import { NextResponse } from 'next/server';
import { z } from 'zod';

// Validation schema for creating a report
const createReportSchema = z.object({
  subjectId: z.string().min(1, 'Subject ID is required'),
  format: z.enum(['PDF', 'CSV']).optional().default('PDF'),
});

/**
 * GET /api/docente/reportes
 * Retrieves all reports generated by the teacher
 */
export async function GET() {
  const session = await getServerSession(authOptions);

  if (!session || session.user.role !== 'DOCENTE') {
    return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
  }

  try {
    const reports = await db.report.findMany({
      where: {
        requestedById: session.user.id,
      },
      include: {
        subject: {
          select: {
            name: true,
            code: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return NextResponse.json(reports);
  } catch (error) {
    console.error('Error en GET /api/docente/reportes:', error);
    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 });
  }
}

/**
 * POST /api/docente/reportes
 * Creates a new report for a subject
 */
export async function POST(request: Request) {
  const session = await getServerSession(authOptions);

  if (!session || session.user.role !== 'DOCENTE') {
    return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const { subjectId, format } = createReportSchema.parse(body);

    // Verificar que la asignatura existe y pertenece al docente
    const subject = await db.subject.findFirst({
      where: {
        id: subjectId,
        teacherId: session.user.id,
      },
      include: {
        classes: {
          select: {
            date: true,
          },
          orderBy: {
            date: 'desc',
          },
          take: 1,
        },
      },
    });

    if (!subject) {
      return NextResponse.json(
        { error: 'Asignatura no encontrada o no pertenece al docente' },
        { status: 404 }
      );
    }

    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1;
    const currentPeriod = currentMonth <= 6 ? 1 : 2;
    const currentYear = currentDate.getFullYear();

    // Verificar si ya existe un reporte para este período
    const existingReport = await db.report.findFirst({
      where: {
        subjectId,
        period: currentPeriod,
        year: currentYear,
        requestedById: session.user.id,
      },
    });

    if (existingReport && existingReport.status !== 'FALLIDO') {
      return NextResponse.json(
        { error: 'Ya se ha generado un reporte para este período' },
        { status: 400 }
      );
    }

    // Crear el reporte en estado PENDIENTE
    let newReport;
    try {
      newReport = await db.report.create({
        data: {
          subjectId,
          requestedById: session.user.id,
          status: 'PENDIENTE',
          format,
          period: currentPeriod,
          year: currentYear,
        },
      });
    } catch (dbError) {
      console.error('Error creando reporte en DB:', dbError);
      return NextResponse.json({ error: 'Error creando el reporte' }, { status: 500 });
    }

    try {
      // Actualizar estado a EN_PROCESO
      await db.report.update({
        where: { id: newReport.id },
        data: { status: 'EN_PROCESO' },
      });

      const { buffer: pdfBuffer, fileName } = await generateAttendanceReportPDF(
        subjectId,
        session.user.id,
        currentPeriod,
        currentYear
      );

      const blob = await put(`reports/${fileName}`, pdfBuffer, {
        access: 'public',
        contentType: 'application/pdf',
      });

      // Actualizar el reporte con la información del archivo generado
      const completedReport = await db.report.update({
        where: { id: newReport.id },
        data: {
          status: 'COMPLETADO',
          fileUrl: blob.url,
          fileName: fileName,
        },
        include: {
          subject: {
            select: {
              name: true,
              code: true,
            },
          },
        },
      });

      return NextResponse.json(completedReport, { status: 201 });
    } catch (pdfError) {
      console.error('Error generando PDF:', pdfError);

      // Actualizar estado del reporte a FALLIDO
      try {
        await db.report.update({
          where: { id: newReport.id },
          data: {
            status: 'FALLIDO',
            error: pdfError instanceof Error ? pdfError.message : 'Error desconocido',
          },
        });
      } catch (updateError) {
        console.error('Error actualizando estado de reporte fallido:', updateError);
      }

      return NextResponse.json(
        {
          error: 'Error generando el PDF',
          details: pdfError instanceof Error ? pdfError.message : 'Error desconocido',
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error en POST /api/docente/reportes:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      {
        error: 'Error interno del servidor',
        details: error instanceof Error ? error.message : 'Error desconocido',
      },
      { status: 500 }
    );
  }
}
